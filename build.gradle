plugins {
  id 'org.springframework.boot' version '2.7.6'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'java'
}

apply plugin: 'java'

group = 'org.springframework.samples'
version = '2.7.6-digma'
sourceCompatibility = '11'

def OPENTELEMETRY_VERSION = '1.20.1'
def OPENTELEMETRY_ALPHA_VERSION = '1.20.1-alpha'
def DIGMA_INSTR_VERSION = '0.4.22'

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri("https://s01.oss.sonatype.org/content/groups/public/")
  }
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.2.2"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'org.ehcache:ehcache'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'mysql:mysql-connector-java'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Digma instrumentation - using the file as temp solution
    implementation("io.github.digma-ai:digma-otel-instr-common:${DIGMA_INSTR_VERSION}")
    implementation("io.github.digma-ai:digma-otel-instr-spring-boot:${DIGMA_INSTR_VERSION}")

    // OpenTelemetry Spring Starter
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:${OPENTELEMETRY_ALPHA_VERSION}")

    implementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv:${OPENTELEMETRY_ALPHA_VERSION}")

    // OTEL exporter
    implementation("io.opentelemetry:opentelemetry-exporter-otlp:${OPENTELEMETRY_VERSION}")

//    //Used to autoconfigure spring-web
//    implementation("org.springframework:spring-web:${SPRING_VERSION}")
//
//    //Used to autoconfigure spring-webmvc
//    implementation("org.springframework:spring-webmvc:${SPRING_VERSION}")
//
//    //Used to autoconfigure spring-webflux
//    implementation("org.springframework:spring-webflux:${SPRING_VERSION}")

    //Enables instrumentation using @WithSpan
    implementation("io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:${OPENTELEMETRY_VERSION}")

    // used for ClientTester
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
}

tasks.named('test') {
  useJUnitPlatform()
}

task runClientTester(type: JavaExec) {
    group = "Execution"
    description = "Run Client Tester"
    classpath = sourceSets.main.runtimeClasspath
    main = 'petclinic.client.ClientTester'
}
